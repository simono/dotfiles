" Vim configuration file.
"
" Location: ~/.vimrc
"
" Simon Olofsson <simon@olofsson.de>
"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Setup pathogen
runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()
execute pathogen#helptags()

" completion mode that is used in insert mode
set completeopt=longest,menu
" highlight the screen line of the cursor
set cursorline
" Use ack for grepping
set grepprg=ack
" highlight the previous search pattern
set hlsearch
" ignore case in search patterns
set ignorecase
" override 'ignorecase' if the search pattern contains upper case characters
set smartcase
" Use two spaces for a tab
set tabstop=2 shiftwidth=2
" completion mode that is used on the command line
set wildmode=longest,list

" Vim 7.3 features
if v:version > 702
	" highlight column after 'textwidth'
	set colorcolumn=+1
	" Concealed text is completely hidden unless it has
	" a custom replacement character defined
	set conceallevel=2
	" show the line numer relative to the current line
	set relativenumber
endif

" Appearance
if has("gui_running")
	set background=dark
	colorscheme solarized
else
	colorscheme desert
endif

" FileType settings
autocmd FileType *tex setlocal textwidth=80
autocmd FileType markdown setlocal textwidth=80 expandtab
autocmd FileType text setlocal textwidth=80

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		\ | wincmd p | diffthis
endif

" Run xmllint on the range
if !exists(":XmlFormat")
	command -range=% XmlFormat set ft=xml
		\ | :<line1>,<line2>!xmllint --format --recover - 2>/dev/null
endif

if has("gui_running")
	" save sessions with .vis extension
	map <Leader>se :mksession!  session.vis<CR>
	" automatically source vim sessions
	au BufRead *.vis source %
endif

" Easier escaping
inoremap jj <ESC>

" Spell checking
" Toggle German spelling, with \sg
nnoremap <Leader>sg :setlocal spell! spelllang=de_20 <CR>
" Toggle English spelling, with \sa
nnoremap <Leader>sa :setlocal spell! spelllang=en_us <CR>

" Use <F6> to close HTML/XML tags
inoremap <F6> </<C-X><C-O>

" Use <F7> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F7>

" Disable arrow keys
noremap		<Up>	<nop>
noremap		<Down>	<nop>
noremap		<Left>	<nop>
noremap		<Right>	<nop>
inoremap	<Up>	<nop>
inoremap	<Down>	<nop>
inoremap	<Left>	<nop>
inoremap	<Right>	<nop>

" Powerline
let g:Powerline_symbols = 'unicode'
let g:Powerline_stl_path_style = 'short'

" Markdown
let g:markdown_fenced_languages = [ "java", "scala", "python", "ruby", "shell=sh" ]

" Clojure
let  g:vimclojure#ParenRainbow = 1
